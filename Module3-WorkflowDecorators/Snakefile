### IMPORTS ###
import snakemake 
import os
import re

samples: list[str] = [
    "Sample1",
    "Sample2", 
    "Sample3"
]

wildcard_constraints: 
    sample = "[A-Za-z0-9]+"

rule all:
    input: 
        expand("output/data/{sample}.bam", sample = samples)

# We give this rule 4 threads, 4GB memory, and output a log file. 
rule fastp: 
    input:
        r1 = "../data/{sample}_R1.fastq",
        r2 = "../data/{sample}_R2.fastq"
    output:
        r1_clean = "output/data/{sample}_R1.clean.fastq",
        r2_clean = "output/data/{sample}_R2.clean.fastq",
        html_report = "output/reports/{sample}-fastp-report.html",
        json_report = "output/reports/{sample}-fastp-report.json"
    threads: 
        4
    resources:
        mem_mb = 4000
    log:
        stderr = "logs/{sample}-fastp.log"
    params:
        qual = 20
    shell:
        """
        fastp --in1 {input.r1} --in2 {input.r2} \
        --out1 {output.r1_clean} --out2 {output.r2_clean} \
        --detect_adapter_for_pe \
        --average_qual {params.qual} \
        --thread {threads} \
        --html {output.html_report} \
        --json {output.json_report} 2> {log.stderr}
        """

rule bwa_mem: 
    input:
        r1_clean = "output/data/{sample}_R1.clean.fastq",
        r2_clean = "output/data/{sample}_R2.clean.fastq",
        ref = "../reference/chr1-3.fa"
    output:
        sam = temp("output/data/{sample}-aligned.sam")
    threads: 
        4
    resources: 
        mem_mb = 4000
    log:
        stderr = "logs/{sample}-bwamem.log"
    shell: 
        """
        bwa mem {input.ref} {input.r1_clean} {input.r2_clean} -t {threads} > {output.sam} 2> {log.stderr}
        """

rule convert_sam_to_bam: 
    input:
        sam = "output/data/{sample}-aligned.sam"
    output:
        bam = "output/data/{sample}.bam"
    threads: 
        4
    resources: 
        mem_mb = 1000
    log:
        stderr = "logs/{sample}_convert.log"
    shell:
        """
        samtools view --bam {input.sam} -o {output.bam} 2> {log.stderr}
        """

rule sort_bam: 
    input:
        bam = "output/data/{sample}.bam"
    output: 
        bam_sort = "output/data/{sample}-sorted.bam"
    threads: 
        4
    resources:
        mem_mb = 4000
    log:
        stderr = "output/logs/{sample}-sort.log"
    shell:
        """
        samtools sort {input.bam} -o {output.bam_sort} 2> {log.stderr}
        """

rule index_bam: 
    input: 
        bam_sort = "output/data/{sample}-sorted.bam"
    output:
        bai = "output/data/{sample}-sorted.bai"
    threads: 
        4
    resources: 
        mem_mb = 8000
    log:
        stderr = "output/logs/{sample}-indexbam.log"
    shell:  
        """
        samtools index -b {input.bam_sort} -o {output.bai} 2> {log.stderr}
        """