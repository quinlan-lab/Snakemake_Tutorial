### IMPORTS ###
import snakemake 
import os
import re

samples: list[str] = [
    "Sample1"
]

# Wildcard constraints; should all be alphanumeric
wildcard_constraints: 
    sample = "[A-Za-z0-9]+"

# Multiple rules; only need the ending rule output, not the intermediate output
rule all:
    input: 
        expand("output/data/{sample}-aligned.bam", sample = samples)

rule fastp: 
    input:
        r1 = "../data/{sample}_R1.fastq",
        r2 = "../data/{sample}_R2.fastq"
    output:
        r1_clean = "output/data/{sample}_R1.clean.fastq",
        r2_clean = "output/data/{sample}_R2.clean.fastq",
        html_report = "output/reports/{sample}-fastp-report.html",
        json_report = "output/reports/{sample}-fastp-report.json"
    shell:
        """
        fastp --in1 {input.r1} --in2 {input.r2} \
        --out1 {output.r1_clean} --out2 {output.r2_clean} \
        --detect_adapter_for_pe \
        --average_qual 20 \
        --thread {threads} \
        --html {output.html_report} \
        --json {output.json_report}
        """

# Input same as previous rule output. Snakemake scans rules for 
# rules that generate output matching this rule's input. 

# Some rules are more involved and need more resources. Define threads
# to tell snakemake how many resources to give this. 
# Threads is the same as cores; if you run "snakemake --cores 32" and 
# define the threads for bwa_mem as 16, then you can run 2 concurrent bwa_mem processes. 
rule bwa_mem: 
    input:
        r1_clean = "output/data/{sample}_R1.clean.fastq",
        r2_clean = "output/data/{sample}_R2.clean.fastq",
        ref = "../reference/GRCh38.fa"
    output:
        sam = temp("output/data/{sample}-aligned.sam")
    shell: 
        """
        bwa mem {input.ref} {input.r1_clean} {input.r2_clean} > {output.sam}
        """

rule convert_sam_to_bam: 
    input:
        sam = "output/data/{sample}-aligned.sam"
    output:
        bam = "output/data/{sample}-aligned.bam"
    shell:
        """
        samtools view -F 4 --bam {input.sam} -o {output.bam}
        """