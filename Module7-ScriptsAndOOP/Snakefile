### IMPORTS ###
import snakemake 
import os
import re

configfile: 'config.yaml'
in_dir: str = config["input_directory"]
out_dir: str = config["output_directory"]
reference: str = config["reference_genome"]
samples: list[str] = config["samples"]

sample_paths = {
    "Sample1": {
        "R1": in_dir + "/Sample1_R1.fastq",
        "R2": in_dir + "/Sample1_R2.fastq",
    },
    "Sample2": {
        "R1": in_dir + "/Sample2_R1.fastq",
        "R2": in_dir + "/Sample2_R2.fastq",
    },
    "Sample3": {
        "R1": in_dir + "/Sample3_R1.fastq",
        "R2": in_dir + "/Sample3_R2.fastq",
    }
}

sample_quals = {
    "Sample1": 5,
    "Sample2": 10, 
    "Sample3": 20
}

# Format
in_dir = in_dir.rstrip("/")
out_dir = out_dir.rstrip("/")

wildcard_constraints: 
    out_dir = out_dir,
    sample = "[A-Za-z0-9]+"

rule all:
    input: 
        expand("{out_dir}/data/{sample}-sorted.bai", out_dir=out_dir, sample=samples),
        expand("{out_dir}/cigar/{sample}-fullmatch.txt", out_dir=out_dir, sample=samples), 
        expand("{out_dir}/mapq/{sample}-avgmapq.txt", out_dir=out_dir, sample=samples)


def getSampleQual(wildcards):
    return sample_quals[wildcards.sample]

rule fastp: 
    input:
        r1 = lambda wc: sample_paths[wc.sample]["R1"],
        r2 = lambda wc: sample_paths[wc.sample]["R2"]
    output:
        r1_clean = temp("{out_dir}/data/{sample}_R1.clean.fastq"),
        r2_clean = temp("{out_dir}/data/{sample}_R2.clean.fastq"),
        html_report = "{out_dir}/reports/{sample}-fastp-report.html",
        json_report = "{out_dir}/reports/{sample}-fastp-report.json"
    threads: 
        4
    resources:
        mem_mb = 4000
    conda: 
        "../envs/bioinformatics.yaml"
    log:
        stderr = "{out_dir}/logs/{sample}-fastp.log"
    params:
        qual = getSampleQual
    shell:
        """
        fastp \
            --in1 {input.r1} --in2 {input.r2} \
            --out1 {output.r1_clean} --out2 {output.r2_clean} \
            --detect_adapter_for_pe \
            --average_qual {params.qual} \
            --thread {threads} \
            --html {output.html_report} \
            --json {output.json_report} 2> {log.stderr}
        """

rule bwa_mem: 
    input:
        r1_clean = rules.fastp.output.r1_clean,
        r2_clean = rules.fastp.output.r2_clean,
        ref = reference
    output:
        sam = temp("{out_dir}/data/{sample}-aligned.sam")
    threads: 
        4
    resources: 
        mem_mb = 4000
    conda: 
        "../envs/bioinformatics.yaml"
    log:
        stderr = "{out_dir}/logs/{sample}-bwamem.log"
    shell: 
        """
        bwa mem \
            {input.ref} {input.r1_clean} {input.r2_clean} \
            -t {threads} \
            > {output.sam} 2> {log.stderr}
        """

rule full_cigar: 
    input: 
        sam = rules.bwa_mem.output.sam
    output:
        cigar_counts = "{out_dir}/cigar/{sample}-fullmatch.txt"
    threads: 
        1
    resources:
        mem_mb = 1000
    conda: 
        "../envs/bioinformatics.yaml"
    log: 
        "{out_dir}/logs/{sample}-cigar.log"
    script:
        "scripts/full_match_cigar.py"

rule average_mapq: 
    input: 
        sam = rules.bwa_mem.output.sam
    output:
        avg_mapq = "{out_dir}/mapq/{sample}-avgmapq.txt"
    threads: 
        1
    resources:
        mem_mb = 1000
    conda: 
        "../envs/bioinformatics.yaml"
    log: 
        "{out_dir}/logs/{sample}-mapq.log"
    script:
        "scripts/average_mapq.R"

rule convert_sam_to_bam: 
    input:
        sam = rules.bwa_mem.output.sam
    output:
        bam = temp("{out_dir}/data/{sample}.bam")
    threads: 
        4
    resources: 
        mem_mb = 1000
    conda: 
        "../envs/bioinformatics.yaml"
    log:
        stderr = "{out_dir}/logs/{sample}_convert.log"
    script:
        "scripts/convert_sam_to_bam.sh"

rule sort_bam: 
    input:
        bam = rules.convert_sam_to_bam.output.bam
    output: 
        bam_sort = "{out_dir}/data/{sample}-sorted.bam"
    threads: 
        4
    resources:
        mem_mb = 4000
    conda: 
        "../envs/bioinformatics.yaml"
    log:
        stderr = "{out_dir}/logs/{sample}-sort.log"
    shell:
        """
        samtools sort {input.bam} -o {output.bam_sort} 2> {log.stderr}
        """

rule index_bam: 
    input: 
        bam_sort = rules.sort_bam.output.bam_sort
    output:
        bai = "{out_dir}/data/{sample}-sorted.bai"
    threads: 
        4
    conda: 
        "../envs/bioinformatics.yaml"
    log:
        stderr = "{out_dir}/logs/{sample}-indexbam.log"
    shell:  
        """
        samtools index -b {input.bam_sort} -o {output.bai} 2> {log.stderr}
        """