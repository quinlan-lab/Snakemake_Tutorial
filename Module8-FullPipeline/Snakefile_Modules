### IMPORTS ###
import snakemake 
import os
import re

configfile: 'config.yaml'
in_dir: str = config["input_directory"]
out_dir: str = config["output_directory"]
reference: str = config["reference_genome"]
samples: list[str] = config["samples"]

# Format
in_dir = in_dir.rstrip("/")
out_dir = out_dir.rstrip("/")

wildcard_constraints: 
    out_dir = out_dir,
    sample = "[A-Za-z0-9]+"

rule all:
    input: 
        expand("{out_dir}/data/{sample}.bai", out_dir = out_dir, sample = samples),
        expand("{out_dir}/reports/{sample}_fastqc.html", out_dir = out_dir, sample = samples)

rule fastp: 
    input:
        r1 = in_dir + "/{sample}_R1.fastq",
        r2 = in_dir + "/{sample}_R2.fastq"
    output:
        r1_clean = "{out_dir}/data/{sample}_R1.clean.fastq",
        r2_clean = "{out_dir}/data/{sample}_R2.clean.fastq",
        html_report = "{out_dir}/reports/{sample}-fastp-report.html",
        json_report = "{out_dir}/reports/{sample}-fastp-report.json"
    threads: 
        4
    resources:
        mem_mb = 4000
    log:
        stderr = "{out_dir}/logs/{sample}-fastp.log"
    params:
        qual = 20
    shell:
        """
        ml fastp
        fastp --in1 {input.r1} --in2 {input.r2} \
        --out1 {output.r1_clean} --out2 {output.r2_clean} \
        --detect_adapter_for_pe \
        --average_qual {params.qual} \
        --thread {threads} \
        --html {output.html_report} \
        --json {output.json_report} 2> {log.stderr}
        """

rule bwa_mem: 
    input:
        r1_clean = rules.fastp.output.r1_clean,
        r2_clean = rules.fastp.output.r2_clean,
        ref = reference
    output:
        sam = temp("{out_dir}/data/{sample}-aligned.sam")
    threads: 
        4
    resources: 
        mem_mb = 4000
    log:
        stderr = "{out_dir}/logs/{sample}-bwamem.log"
    shell: 
        """
        ml bwa
        bwa mem {input.ref} {input.r1_clean} {input.r2_clean} -t {threads} > {output.sam} 2> {log.stderr}
        """

rule convert_sam_to_bam: 
    input:
        sam = rules.bwa_mem.output.sam
    output:
        bam = temp("{out_dir}/data/{sample}-aligned.bam")
    threads: 
        4
    resources: 
        mem_mb = 1000
    log:
        stderr = "{out_dir}/logs/{sample}_convert.log"
    shell:
        """
        ml samtools
        samtools view --bam {input.sam} -o {output.bam} 2> {log.stderr}
        """

rule sort_bam: 
    input:
        bam = rules.convert_sam_to_bam.output.bam
    output: 
        bam_sort = "{out_dir}/data/{sample}.bam"
    threads: 
        4
    resources:
        mem_mb = 4000
    log:
        stderr = "{out_dir}/logs/{sample}-sort.log"
    shell:
        """
        ml samtools
        samtools sort {input.bam} -o {output.bam_sort} 2> {log.stderr}
        """

rule qc:
    input:
        bam_sort = rules.sort_bam.output.bam_sort
    output:
        qc = "{out_dir}/reports/{sample}_fastqc.html"
    threads: 
        4
    resources: 
        mem_mb = 1000
    log:
        stderr = "{out_dir}/logs/{sample}-qc.log"
    params:
        qc_dir = "{out_dir}/reports"
    shell:
        """
        ml samtools
        fastqc {input.bam_sort} -o {params.qc_dir} 2> {log.stderr}
        """

rule index_bam: 
    input: 
        bam_sort = rules.sort_bam.output.bam_sort
    output:
        bai = "{out_dir}/data/{sample}.bai"
    threads: 
        4
    log:
        stderr = "{out_dir}/logs/{sample}-indexbam.log"
    shell:  
        """
        ml samtools
        samtools index -b {input.bam_sort} -o {output.bai} 2> {log.stderr}
        """